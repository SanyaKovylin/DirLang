   // code_buffer_append_byte(code_buf, 0x55);       // push rbp
        // puts("\x23");
        COMMAND("push rbp", "\x55");

        code_buffer_append_byte(code_buf, 0x48);       // mov rbp, rsp
        code_buffer_append_byte(code_buf, 0x89);
        code_buffer_append_byte(code_buf, 0xE5);

        if (func->nlocals > 0) {
            code_buffer_append_byte(code_buf, 0x48);   // sub rsp, N
            code_buffer_append_byte(code_buf, 0x83);
            code_buffer_append_byte(code_buf, 0xEC);
            code_buffer_append_byte(code_buf, (uint8_t) func->nlocals * 8);
        }

        while (current != NULL) {
            IRNode *node = current->node;
            if (!node) {
                current = current->next;
                continue;
            }

            switch(node->type) {

                case IR_LABEL:
                    labels = (Label*) realloc (labels, (label_count + 1) * sizeof(Label));
                    char label_name[32];
                    snprintf(label_name, sizeof(label_name), "L%d", node->label.label_num);
                    labels[label_count].name = strdup(label_name);
                    labels[label_count].address = code_buf->size;
                    label_count++;
                    break;

                case IR_ASSIGN: //TODO
                    // mov [rbp - offset], rax
                    code_buffer_append_byte(code_buf, 0x48);
                    code_buffer_append_byte(code_buf, 0x89);
                    code_buffer_append_byte(code_buf, 0x45);
                    code_buffer_append_byte(code_buf, calculate_arg_shift(func, node->var_const.var_pos));
                    break;

                case IR_BINOP:
                    switch(node->binop.op) {
                        case OP_ADD:
                            // add rax, rbx
                            code_buffer_append_byte(code_buf, 0x48);
                            code_buffer_append_byte(code_buf, 0x01);
                            code_buffer_append_byte(code_buf, 0xD8);
                            break;
                        case OP_SUB:
                            // sub rax, rbx
                            code_buffer_append_byte(code_buf, 0x48);
                            code_buffer_append_byte(code_buf, 0x29);
                            code_buffer_append_byte(code_buf, 0xD8);
                            break;
                        case OP_MUL:
                            // imul rax, rbx
                            code_buffer_append_byte(code_buf, 0x48);
                            code_buffer_append_byte(code_buf, 0x0F);
                            code_buffer_append_byte(code_buf, 0xAF);
                            code_buffer_append_byte(code_buf, 0xC3);
                            break;
                        case OP_DIV:
                            // cqo
                            code_buffer_append_byte(code_buf, 0x48);
                            code_buffer_append_byte(code_buf, 0x99);
                            // idiv rbx
                            code_buffer_append_byte(code_buf, 0x48);
                            code_buffer_append_byte(code_buf, 0xF7);
                            code_buffer_append_byte(code_buf, 0xFB);
                            break;

                        case OP_SIN:
                        case OP_COS:
                        case OP_ARCSIN:
                        case OP_ARCCOS:
                        case OP_LOG:
                        case OP_LN:
                        // case OP_E:
                        case OP_PI:
                        case OP_SQRT:
                        default: break;
                    }

                    break;

                case IR_CALL: {

                    code_buffer_append_byte(code_buf, 0xE8);
                    size_t call_pos = code_buf->size;
                    code_buffer_append_u32(code_buf, 0); // Placeholder

                    puts("CALL");
                    // Record fixup
                    fixups = (Fixup*) realloc(fixups, (fixup_count + 1) * sizeof(Fixup));
                    fixups[fixup_count].code_offset = call_pos;
                    fixups[fixup_count].target = node->call.func_name;
                    fixups[fixup_count].instr_size = 4;
                    fixup_count++;

                    if (node->call.nargs > 0) {
                        code_buffer_append_byte(code_buf, 0x48);   // add rsp, nargs*8
                        code_buffer_append_byte(code_buf, 0x83);
                        code_buffer_append_byte(code_buf, 0xC4);
                        code_buffer_append_byte(code_buf, node->call.nargs * 8);
                    }

                    break;
                }

                case IR_JUMP: {

                    // jmp rel32 (placeholder)
                    code_buffer_append_byte(code_buf, 0xE9);
                    size_t jump_pos = code_buf->size;
                    code_buffer_append_u32(code_buf, 0); // Placeholder

                    // Record fixup
                    fixups = (Fixup*) realloc(fixups, (fixup_count + 1) * sizeof(Fixup));
                    char target_label[32];
                    snprintf(target_label, sizeof(target_label), "L%d", node->jump.target_label);
                    fixups[fixup_count].code_offset = jump_pos;
                    fixups[fixup_count].target = strdup(target_label);
                    fixups[fixup_count].instr_size = 4;
                    fixup_count++;

                    break;}

                case IR_CJUMP: {

                    // test rax, rax
                    code_buffer_append_byte(code_buf, 0x48);
                    code_buffer_append_byte(code_buf, 0x85);
                    code_buffer_append_byte(code_buf, 0xC0);

                    code_buffer_append_byte(code_buf, 0x0F);
                    code_buffer_append_byte(code_buf, 0x84);
                    size_t cjump_pos = code_buf->size;
                    code_buffer_append_u32(code_buf, 0); // Placeholder

                    // Record fixup
                    fixups = (Fixup*) realloc (fixups, (fixup_count + 1) * sizeof(Fixup));
                    char false_label[32];
                    snprintf(false_label, sizeof(false_label), "L%d", node->cjump.false_label);
                    fixups[fixup_count].code_offset = cjump_pos;
                    fixups[fixup_count].target = strdup(false_label);
                    fixups[fixup_count].instr_size = 4;
                    fixup_count++;}

                    break;

                case IR_RETURN:

                    if (func->nlocals > 0) {
                        // Restore stack pointer
                        code_buffer_append_byte(code_buf, 0x48);       // lea rsp, [rbp]
                        code_buffer_append_byte(code_buf, 0x8D);
                        code_buffer_append_byte(code_buf, 0x65);
                        code_buffer_append_byte(code_buf, 0x00);
                    }
                    // mov rsp, rbp
                    code_buffer_append_byte(code_buf, 0x48);
                    code_buffer_append_byte(code_buf, 0x89);
                    code_buffer_append_byte(code_buf, 0xEC);
                    // pop rbp
                    code_buffer_append_byte(code_buf, 0x5D);

                    if (strcmp(func->name, "main") == 0) {
                        // Linux x86-64 _start expects main to use exit syscall
                        code_buffer_append_byte(code_buf, 0x48);     // mov rdi, rax (exit code)
                        code_buffer_append_byte(code_buf, 0x89);
                        code_buffer_append_byte(code_buf, 0xC7);

                        code_buffer_append_byte(code_buf, 0x48);     // mov rax, 60 (sys_exit)
                        code_buffer_append_byte(code_buf, 0xC7);
                        code_buffer_append_byte(code_buf, 0xC0);
                        code_buffer_append_byte(code_buf, 0x3C);
                        code_buffer_append_byte(code_buf, 0x00);
                        code_buffer_append_byte(code_buf, 0x00);
                        code_buffer_append_byte(code_buf, 0x00);

                        code_buffer_append_byte(code_buf, 0x0F);     // syscall
                        code_buffer_append_byte(code_buf, 0x05);
                    }
                    else {
                        // Normal function return
                        code_buffer_append_byte(code_buf, 0xC3);     // ret
                    }
                    break;

                case IR_VAR:
                    // mov rax, [rbp - offset]
                    code_buffer_append_byte(code_buf, 0x48);
                    code_buffer_append_byte(code_buf, 0x8B);
                    code_buffer_append_byte(code_buf, 0x45);
                    code_buffer_append_byte(code_buf, calculate_arg_shift(func, node->var_const.var_pos));
                    // // push rax
                    // code_buffer_append_byte(code_buf, 0x50);
                    break;

                case IR_CONST: {
                    // mov rax, imm64
                    code_buffer_append_byte(code_buf, 0x48);
                    code_buffer_append_byte(code_buf, 0xB8);
                    uint64_t value = (uint64_t)node->var_const.num_value;
                    code_buffer_append_u64(code_buf, value);
                    // // push rax
                    // code_buffer_append_byte(code_buf, 0x50);
                    break;}

                case IR_INPUT:

                    puts("INPUT");
                    // System call for reading input (Linux x86_64)
                    // sys_read(fd=0, buf=stack, count=8)
                    code_buffer_append_byte(code_buf, 0x48);  // sub rsp, 8
                    code_buffer_append_byte(code_buf, 0x83);
                    code_buffer_append_byte(code_buf, 0xEC);
                    code_buffer_append_byte(code_buf, 0x08);

                    code_buffer_append_byte(code_buf, 0x48);  // mov rax, 0 (sys_read)
                    code_buffer_append_byte(code_buf, 0xC7);
                    code_buffer_append_byte(code_buf, 0xC0);
                    code_buffer_append_byte(code_buf, 0x00);
                    code_buffer_append_byte(code_buf, 0x00);
                    code_buffer_append_byte(code_buf, 0x00);
                    code_buffer_append_byte(code_buf, 0x00);

                    code_buffer_append_byte(code_buf, 0x48);  // mov rdi, 0 (stdin)
                    code_buffer_append_byte(code_buf, 0xC7);
                    code_buffer_append_byte(code_buf, 0xC7);
                    code_buffer_append_byte(code_buf, 0x00);
                    code_buffer_append_byte(code_buf, 0x00);
                    code_buffer_append_byte(code_buf, 0x00);
                    code_buffer_append_byte(code_buf, 0x00);

                    code_buffer_append_byte(code_buf, 0x48);  // mov rsi, rsp
                    code_buffer_append_byte(code_buf, 0x89);
                    code_buffer_append_byte(code_buf, 0xE6);

                    code_buffer_append_byte(code_buf, 0x48);  // mov rdx, 8
                    code_buffer_append_byte(code_buf, 0xC7);
                    code_buffer_append_byte(code_buf, 0xC2);
                    code_buffer_append_byte(code_buf, 0x08);
                    code_buffer_append_byte(code_buf, 0x00);
                    code_buffer_append_byte(code_buf, 0x00);
                    code_buffer_append_byte(code_buf, 0x00);

                    code_buffer_append_byte(code_buf, 0x0F);  // syscall
                    code_buffer_append_byte(code_buf, 0x05);

                    // Move input to destination
                    code_buffer_append_byte(code_buf, 0x48);  // mov rax, [rsp]
                    code_buffer_append_byte(code_buf, 0x8B);
                    code_buffer_append_byte(code_buf, 0x04);
                    code_buffer_append_byte(code_buf, 0x24);

                    code_buffer_append_byte(code_buf, 0x48);  // add rsp, 8
                    code_buffer_append_byte(code_buf, 0x83);
                    code_buffer_append_byte(code_buf, 0xC4);
                    code_buffer_append_byte(code_buf, 0x08);
                    break;

                case IR_PRINT:{

                    // Preserve registers we'll modify
                    code_buffer_append_byte(code_buf, 0x50);   // push rax
                    code_buffer_append_byte(code_buf, 0x51);   // push rcx
                    code_buffer_append_byte(code_buf, 0x52);   // push rdx
                    code_buffer_append_byte(code_buf, 0x56);   // push rsi
                    code_buffer_append_byte(code_buf, 0x57);   // push rdi

                    code_buffer_append_byte(code_buf, 0x48);  // sub rsp, 8
                    code_buffer_append_byte(code_buf, 0x83);
                    code_buffer_append_byte(code_buf, 0xEC);
                    code_buffer_append_byte(code_buf, 0x08);

                    code_buffer_append_byte(code_buf, 0x48);   // mov [rsp], rax
                    code_buffer_append_byte(code_buf, 0x89);
                    code_buffer_append_byte(code_buf, 0x04);
                    code_buffer_append_byte(code_buf, 0x24);


                    code_buffer_append_byte(code_buf, 0x48);   // mov rsi, reg
                    code_buffer_append_byte(code_buf, 0x89);
                    uint8_t modrm = 0xC0 | (REG_RSP << 3) | REG_RSI;
                    code_buffer_append_byte(code_buf, modrm);

                    // Prepare syscall arguments
                    code_buffer_append_byte(code_buf, 0x48);   // mov rax, 1 (sys_write)
                    code_buffer_append_byte(code_buf, 0xC7);
                    code_buffer_append_byte(code_buf, 0xC0);
                    code_buffer_append_byte(code_buf, 0x01);
                    code_buffer_append_byte(code_buf, 0x00);
                    code_buffer_append_byte(code_buf, 0x00);
                    code_buffer_append_byte(code_buf, 0x00);

                    code_buffer_append_byte(code_buf, 0x48);   // mov rdi, 1 (stdout)
                    code_buffer_append_byte(code_buf, 0xC7);
                    code_buffer_append_byte(code_buf, 0xC7);
                    code_buffer_append_byte(code_buf, 0x01);
                    code_buffer_append_byte(code_buf, 0x00);
                    code_buffer_append_byte(code_buf, 0x00);
                    code_buffer_append_byte(code_buf, 0x00);

                    code_buffer_append_byte(code_buf, 0x48);   // mov rdx, 8 (64-bit value)
                    code_buffer_append_byte(code_buf, 0xC7);
                    code_buffer_append_byte(code_buf, 0xC2);
                    code_buffer_append_byte(code_buf, 0x08);
                    code_buffer_append_byte(code_buf, 0x00);
                    code_buffer_append_byte(code_buf, 0x00);
                    code_buffer_append_byte(code_buf, 0x00);

                    // Make syscall
                    code_buffer_append_byte(code_buf, 0x0F);   // syscall
                    code_buffer_append_byte(code_buf, 0x05);

                    code_buffer_append_byte(code_buf, 0x48);  // add rsp, 8
                    code_buffer_append_byte(code_buf, 0x83);
                    code_buffer_append_byte(code_buf, 0xC4);
                    code_buffer_append_byte(code_buf, 0x08);

                    // Restore registers
                    code_buffer_append_byte(code_buf, 0x5F);   // pop rdi
                    code_buffer_append_byte(code_buf, 0x5E);   // pop rsi
                    code_buffer_append_byte(code_buf, 0x5A);   // pop rdx
                    code_buffer_append_byte(code_buf, 0x59);   // pop rcx
                    code_buffer_append_byte(code_buf, 0x58);   // pop rax
                    break;}

                case IR_RES_PUSH:
                    // push rax
                    code_buffer_append_byte(code_buf, 0x50);
                    break;

                case IR_POP_REG:
                    if (node->pop_reg.num == REG_RAX) {
                        // pop rax
                        code_buffer_append_byte(code_buf, 0x58);
                    } else if (node->pop_reg.num == REG_RBX) {
                        // pop rbx
                        code_buffer_append_byte(code_buf, 0x5B);
                    }
                    break;

                case IR_MOV:{

                    // mov reg_to, reg_from
                    code_buffer_append_byte(code_buf, 0x48); // REX.W prefix
                    code_buffer_append_byte(code_buf, 0x89); // MOV opcode

                    uint8_t modrm = 0xC0 | (node->mov.from << 3) | node->mov.to;
                    code_buffer_append_byte(code_buf, modrm);
                }

                default:
                    break;
            }

            current = current->next;
        }
    }
